#!/usr/bin/env node
'use strict';

/* eslint no-console: 0 */
var _ = require('underscore');
var minimist = require('minimist');
var JuttleBundler = require('juttle-service').JuttleBundler;
var client = require('juttle-service').client;
var Promise = require('bluebird');
var WebSocket = require('ws');
var path = require('path');
var cli_errors = require('juttle-service').cliErrors;
var open = require('open');
var chokidar = require('chokidar');
var fs = require('fs');
var crypto = require('crypto');
var rp = require('request-promise');

function push_file(filename, topic) {

    return new Promise(function (resolve, reject) {

        console.log(`Bundling program ${filename} and pushing to rendezvous topic ${topic}...`);
        // Open a websocket connection over the rendezvous channel
        var ws = new WebSocket(`ws://${opts['juttle-engine']}/rendezvous/${topic}`);
        ws.on('open', function() {
            // Bundle the program locally and push the bundle over the websocket.
            var bundler = new JuttleBundler();
            bundler.bundle(filename)
                .then(function(res) {
                    return new Promise(function (resolve, reject) {
                        ws.on('message', (data) => {
                            data = JSON.parse(data);

                            if (data.type === 'error') {
                                reject(data.error);
                            } else {
                                resolve();
                            }
                        })

                        ws.send(JSON.stringify({
                            type: 'bundle',
                            bundle_id: filename,
                            bundle: res.bundle
                        }));
                    });
                })
                .catch(function(err) {
                    // If it's a juttle error containing a program
                    // location, print the error in context.
                    if (err.code === 'JS-JUTTLE-ERROR') {
                        console.error(cli_errors.show_in_context({err: err.info.err,
                                                                  program: err.info.bundle.program,
                                                                  modules: err.info.bundle.modules,
                                                                  filename: filename}));
                    } else {
                        console.error('ERROR', err.message);
                    }
                })
                .finally(function() {
                    ws.close();
                    resolve();
                });
        });
    });
}

function get_file_hash(path) {
    var data = fs.readFileSync(path);
    var shasum = crypto.createHash('sha256');
    shasum.update(data);
    return shasum.digest('hex');
}

function push_path(opts) {
    if (opts.path !== undefined) {
        push_file(opts.path, opts.topic)
            .then(function() {
                console.log(`==> View program at: http://${opts['juttle-engine']}/?rendezvous=${opts.topic}`);
            });
    } else {
        client.usage();
    }
}

function watch_path(opts) {
    if (opts.path !== undefined) {
        var last_hash = get_file_hash(opts.path);

        push_file(opts.path, opts.topic)
            .then(function() {
                console.log(`==> View program at: http://${opts['juttle-engine']}/?rendezvous=${opts.topic}`);
            });

        console.log(`Watching file ${opts.path} for changes:`);

        chokidar.watch(opts.path).on('change', function(path) {
            var hash = get_file_hash(opts.path);

            if (hash !== last_hash) {
                push_file(opts.path, opts.topic);
            }

            last_hash = hash;
        });
    } else {
        client.usage();
    }
}

// Given a complete path, which reflects a path on the local
// filesystem, figure out the right path suffix to use relative to the
// juttle-service's root path. Returns a promise that resolves with
// the correct path suffix on or rejects if the local path and the
// service's root path don't share a prefix.
function reconcile_path(juttle_engine, local_path) {
    let idx;

    return rp(`http://${juttle_engine}/api/v0/config-info/`)
    .then(function(body) {
        return JSON.parse(body);
    })
    .then(function(config) {
        if (!_.has(config, 'root')) {
            throw new Error('Server has no configured root directory');
        }
        // The root directory must be a prefix of the local path.
        idx = local_path.indexOf(config.root);
        if (idx !== 0) {
            throw new Error(`Local path (${local_path}) is not a path below server root path (${config.root})`);
        } else {
            let relative_to_root = local_path.substring(config.root.length);
            return relative_to_root;
        }
    });
}

function browser(opts) {
    if (opts.path) {
        reconcile_path(opts['juttle-engine'], opts.path)
        .then(function(rec_path) {
            open(`http://${opts['juttle-engine']}/?path=${rec_path}`);
        });
    } else {
        client.usage();
    }
}

var commands = {
    push: {
        usage: '{path} [{topic}]',
        perform: push_path
    },
    watch: {
        usage: '{path} [{topic}]',
        perform: watch_path
    },
    browser: {
        usage: '{path}',
        perform: browser
    }
};

var cmdargs = {
    server: {
        usage: '--juttle-engine <hostname:port>',
        desc: 'Hostname/port of server'
    },
    topic: {
        usage: '--topic <rendezvous-topic>',
        desc: 'Rendezvous topic'
    }
};

client.init({
    write_output: console.log,
    write_error: console.error,
    client_exit: process.exit,
    commands: commands,
    cmdargs: cmdargs
});

var defaults = {
    'juttle-engine': 'localhost:8080',
    'topic': 'default',
    'wait': false
};

var opts = minimist(process.argv.slice(2));

var command = opts._[0];

_.defaults(opts, defaults);

if (opts.help ||
    opts._.length !== 1) {
    client.usage();
}

// Resolve any path argument now so it doesn't have to be resolved later
if (_.has(opts, 'path')) {
    opts.path = path.resolve(opts.path);
}

client.command(opts['juttle-engine'], opts, command);
